#include<bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define pll pair<ll,ll>
#define sll set<ll>
#define msll multiset<ll>
#define mll map<ll,ll>
#define vll vector<ll>
#define vpl vector<pll>
#define gll greater<ll>
#define gpl greater<pll>
#define spl set<pll>
#define mspl multiset<pll>
#define lb lower_bound
#define bp __builtin_popcount
#define ub upper_bound
#define prq priority_queue
#define mp make_pair
#define pb push_back
#define mem(x,y) memset(x, y, sizeof x)
#define endl "\n"
#define sz(x) (ll)x.size()
#define sqr(x) x*x
#define rapido ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
typedef long long ll;
typedef long double ld;
ll mx = INT_MAX;
ll mn = INT_MIN;
ll INF = 1e18+10;
ll MOD = 1e9+7;
const ll maxs = 1e6+6;
const ll lg = 22; 
ll fast(ll base , ll expo){ ll res = 1; while(expo>=1){ if(expo%2) res *= base; base *= base; expo /= 2; } return res; }

ll V, E; 
vll G[maxs];
bool vis[maxs];

void init(){
    mx = INT_MIN; mn = INT_MAX; INF = 1e18+10;
    mem(vis , false);
}

void pre(){
    
}

void dfs(ll node, ll parent){
    cout<<node<<" ";
    vis[node] = true;
    for(auto it:G[node]){
        if(vis[it] == false)
            dfs(it , node);
    }
}

void code_idhr_h(){
    cin>>V>>E;
    for(ll i=1; i<=E; i++){
        ll x,y; cin>>x>>y;
        G[x].pb(y); G[y].pb(x);
    }
    dfs(1 , 0);
}

int main(){
    rapido;
    pre();
    ll T=1; //cin>>T;
    while(T--){
        init();
        code_idhr_h();
    }
    return 0;
}